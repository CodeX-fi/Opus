<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:dialog="clr-namespace:Opus.Services.Implementation.UI.Dialogs;assembly=Opus.Services.Implementation"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                    xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:resButtons="clr-namespace:Opus.Resources.Buttons;assembly=Opus.Resources"
                    xmlns:resExtractButtons="clr-namespace:Opus.Resources.Buttons.Extraction;assembly=Opus.Resources"
                    xmlns:resDialog="clr-namespace:Opus.Resources.Labels.Dialogs;assembly=Opus.Resources"
                    xmlns:resLabels="clr-namespace:Opus.Resources.Labels;assembly=Opus.Resources"
                    xmlns:resValidation="clr-namespace:Opus.Resources.Validation;assembly=Opus.Resources"
                    xmlns:resToolTips="clr-namespace:Opus.Resources.ToolTips;assembly=Opus.Resources"
                    xmlns:resCompositionToolTips="clr-namespace:Opus.Resources.ToolTips.Composition;assembly=Opus.Resources"
                    xmlns:controls="clr-namespace:Opus.Styles.Controls;assembly=Opus.Styles">

    <!-- Contains datatemplates for various dialogs-->

    
    <!--
         MESSAGE DIALOG
         Shows the user a given message and only has an OK-button for closing the dialog.
    -->
    <DataTemplate DataType="{x:Type dialog:MessageDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            <TextBlock Style="{DynamicResource DialogContentTextBlock}"
                       Text="{Binding Content}"/>
            
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogOkButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>
    
    <!--
         UPDATE DIALOG
         Notifies the user of an impending update for the program. Has the options of
         updating and closing the program or delaying the update.
    -->
    <DataTemplate DataType="{x:Type dialog:UpdateDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            <TextBlock Style="{DynamicResource DialogContentTextBlock}"
                       Text="{Binding UpdateMessage}"
                       Width="250"/>
            
            <!-- 
                 Update notes are delivered in a JSON-file with the update file and reside in the same
                 folder path. Notes are displayed here in the ItemsControl.
            -->
            <ItemsControl ItemsSource="{Binding Notes}"
                          HorizontalAlignment="Center"
                          Width="200"
                          Visibility="{Binding ShowNotes, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Style="{DynamicResource UpdateNotesTextBlock}"
                                   Margin="0, 0, 0, 0"
                                   Text="{Binding ., StringFormat=- {0}}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            
            <!--
                 Buttons for accepting the update or delaying it.
            -->
            <TextBlock Style="{DynamicResource DialogContentTextBlock}"
                       Text="{Binding UpdateConfirmation}"/>
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        Content="{x:Static resButtons:General.Confirm}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!-- 
         CONFIRMATION DIALOG
         A dialog similar to Message Dialog, but with options to either
         accept of cancel.
    -->
    <DataTemplate DataType="{x:Type dialog:ConfirmationDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            <TextBlock Style="{DynamicResource DialogContentTextBlock}"
                       Text="{Binding Content}"/>
            
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        Content="{x:Static resButtons:General.Confirm}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         FILE TITLE DIALOG
         A dialog prompting the user for a file name.
    -->
    <DataTemplate DataType="{x:Type dialog:FileTitleDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Textbox for entering the filename. Validates input according to given rules and
                 enables save button only when input is validated.
            -->
            <TextBox Style="{DynamicResource HintedValidationTextBox}"
                     Text="{Binding Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                     FontSize="16"
                     Width="250"
                     x:Name="TitleText"
                     md:HintAssist.Hint="{x:Static resLabels:General.Name}"/>
            
            <!--
                 Buttons for saving with the given name or canceling the operation.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        IsEnabled="{Binding ElementName=TitleText, Path=(Validation.HasError), 
                        Converter={StaticResource InvertBooleanConverter}}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         NEW BOOKMARK DIALOG
         A dialog for creating a new bookmark for extraction.
    -->
    <DataTemplate DataType="{x:Type dialog:BookmarkDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Textbox for the bookmark title. Cannot be empty and is validated.
            -->
            <TextBox Style="{DynamicResource HintedTextBox}"
                     Text="{Binding Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                     Width="250"
                     Name="TitleText"
                     md:ValidationAssist.Suppress="True"
                     md:HintAssist.Hint="{x:Static resLabels:General.Name}"/>
            
            <!--
                 Textboxes for entering start and end pages. Neither can be empty and must be bigger than zero. 
                 Start page must be smaller or equal than endpage. Both boxes are validated.
            -->
            <StackPanel Style="{StaticResource NumberFieldStackPanel}">
                <TextBox Style="{DynamicResource NumberTextBox}"
                         Text="{Binding StartPage, UpdateSourceTrigger=PropertyChanged, 
                         ValidatesOnDataErrors=True, ValidatesOnExceptions=True}"
                         Width="70"
                         Name="StartPageText"
                         md:HintAssist.Hint="{x:Static resLabels:General.Start}"/>
                <Rectangle Width="2" Fill="LightGray" Opacity="0.5" Margin="5, 20, 5, 5" RadiusX="2" RadiusY="2"/>
                <TextBox Style="{DynamicResource NumberTextBox}"
                         Text="{Binding EndPage, UpdateSourceTrigger=PropertyChanged, 
                         ValidatesOnDataErrors=True, ValidatesOnExceptions=True}"
                         Width="70"
                         Name="EndPageText"
                         md:HintAssist.Hint="{x:Static resLabels:General.End}"/>
            </StackPanel>
            
            <!--
                 Buttons for saving and cancelling. Save button is enabled only
                 if all textboxes have been validated.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}">
                    <Button.IsEnabled>
                        <MultiBinding Converter="{StaticResource BooleanAllNegative}">
                            <Binding ElementName="TitleText" Path="(Validation.HasError)"/>
                            <Binding ElementName="StartPageText" Path="(Validation.HasError)"/>
                            <Binding ElementName="EndPageText" Path="(Validation.HasError)"/>
                        </MultiBinding>
                    </Button.IsEnabled>
                </Button>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         EXTRACT SETTINGS DIALOG
         Provides controls for changing settings applied to extracted bookmarks.
    -->
    <DataTemplate DataType="{x:Type dialog:ExtractSettingsDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Textbox for entering file name template. Various placeholders can be user.
                 Cannot be empty and is validated.
            -->
            <TextBox Style="{DynamicResource HintedTextBox}"
                     x:Name="TitleTextBox"
                     Text="{Binding Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                     ValidatesOnDataErrors=True}"
                     md:ValidationAssist.Suppress="True"
                     Width="300"
                     md:HintAssist.Hint="{Binding NameDescription}"
                     md:HintAssist.HelperText="{Binding NameHelper}"/>

            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10, 20, 10, 20"
                       Visibility="{Binding IsAsking, Converter={StaticResource InverseBoolToVisConverter}}"/>

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        Visibility="{Binding IsAsking, Converter={StaticResource InverseBoolToVisConverter}}">
                
                <!--
                     Switch for selecting whether name template is inquired every time an extraction
                     is requested (vs. using the same template for all extractions). This option is only shown
                     when this dialog is not displayed as part of an extraction process.
                -->
                <StackPanel Margin="0, 0, 10, 0">
                    <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                               VerticalAlignment="Center"
                               Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                               Text="{x:Static resDialog:ExtractionOptions.AlwaysAskTitle}"
                               Margin="0, 0, 0, 10"/>
                    <CheckBox Style="{DynamicResource OptionSwitch}"
                              IsChecked="{Binding AlwaysAsk}"
                              x:Name="AlwaysAskCB"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Cursor="Hand"
                              ToolTip="{x:Static resToolTips:Extraction.SettingsAlwaysAsk}"/>
                </StackPanel>

                <!--
                     Switch for selecting whether extracted files should be converted to pdf/a. 
                     This option is only shown when this dialog is not displayed as part of an extraction process.
                     Setting is disabled and an informative text is shown, if PDF Tools could not be located.
                -->
                <StackPanel>
                    <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                               VerticalAlignment="Center"
                               Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                               Text="{x:Static resDialog:ExtractionOptions.PdfA}"
                               Margin="0, 0, 0, 10"/>
                    <CheckBox Style="{DynamicResource OptionSwitch}"
                              IsChecked="{Binding PdfA}"
                              IsEnabled="{Binding PdfADisabled, Converter={StaticResource InvertBooleanConverter}}"
                              x:Name="PdfACB"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Cursor="Hand"
                              ToolTip="{x:Static resToolTips:Extraction.SettingsPdfA}"/>
                    <TextBlock Style="{DynamicResource MaterialDesignHelperTextBlock}"
                               HorizontalAlignment="Center" VerticalAlignment="Center"
                               Text="{x:Static resValidation:Extraction.PdfTools}"
                               Margin="0, 10, 0, 0"
                               Visibility="{Binding PdfADisabled, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                </StackPanel>
            </StackPanel>

            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10, 20, 10, 20"
                       Visibility="{Binding IsAsking, Converter={StaticResource InverseBoolToVisConverter}}"/>
            
            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Center"
                        Visibility="{Binding IsAsking, Converter={StaticResource InverseBoolToVisConverter}}">

                <!--
                     Switch for selecting whether the extracted files should be compressed into a zip-file.
                     This option is only shown when this dialog is not displayed as a part of an extraction process.
                -->
                <StackPanel Margin="0, 0, 10, 0">
                    <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                               VerticalAlignment="Center"
                               Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                               Text="{x:Static resDialog:ExtractionOptions.CreateZipTitle}"
                               Margin="0, 0, 0, 10"/>
                    <CheckBox Style="{DynamicResource OptionSwitch}"
                              IsChecked="{Binding CreateZip}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Cursor="Hand"
                              ToolTip="{x:Static resToolTips:Extraction.SettingsCreateZip}"/>
                </StackPanel>

                <!--
                     Switch for selecting whether the bookmarks should be organized according to the files they
                     have been extracted from (when extracting to a single file).
                -->
                <StackPanel>
                    <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                               VerticalAlignment="Center"
                               Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                               Text="{x:Static resDialog:ExtractionOrder.GroupByFiles}"
                               Margin="0, 0, 0, 10"/>
                    <CheckBox Style="{DynamicResource OptionSwitch}"
                              IsChecked="{Binding GroupByFiles}"
                              x:Name="GroupByFilesCB"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Cursor="Hand"
                              ToolTip="{x:Static resToolTips:Extraction.BookmarkOrderDialogGroupByFiles}"/>
                </StackPanel>
            </StackPanel>

            <!--
                 Options for selecting what to do with annotation contained in page ranges of the bookmarks
                 selected for extraction. Keep all, select which ones to remove or remove all.
                 This option is only shown when this dialog is not displayed as a part of an extraction process.
            -->
            <StackPanel Visibility="{Binding IsAsking, Converter={StaticResource InverseBoolToVisConverter}}"
                        Margin="0, 0, 0, 10">
                <Separator Style="{DynamicResource MaterialDesignSeparator}"
                           Margin="10, 20, 10, 20"/>
                <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                           VerticalAlignment="Center"
                           Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                           Text="{x:Static resDialog:ExtractionOptions.Annotations}"
                           Margin="0, 0, 0, 10"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                            VerticalAlignment="Center">
                    <RadioButton Style="{DynamicResource TabRadioButton}"
                                 Content="{x:Static resDialog:ExtractionOptions.Keep}"
                                 GroupName="AnnotOption"
                                 IsChecked="{Binding Annotations, Converter={StaticResource BooleanToInt}, 
                                 ConverterParameter=0}"
                                 ToolTip="{x:Static resToolTips:Extraction.SettingsAnnotationsKeep}"/>
                    <RadioButton Style="{DynamicResource TabRadioButton}"
                                 Content="{x:Static resDialog:ExtractionOptions.RemoveUser}"
                                 GroupName="AnnotOption"
                                 IsChecked="{Binding Annotations, Converter={StaticResource BooleanToInt}, 
                                 ConverterParameter=1}"
                                 ToolTip="{x:Static resToolTips:Extraction.SettingsAnnotationsUser}"/>
                    <RadioButton Style="{DynamicResource TabRadioButton}"
                                 Content="{x:Static resDialog:ExtractionOptions.RemoveAll}"
                                 GroupName="AnnotOption"
                                 IsChecked="{Binding Annotations, Converter={StaticResource BooleanToInt}, 
                                 ConverterParameter=2}"
                                 ToolTip="{x:Static resToolTips:Extraction.SettingsAnnotationsAll}"/>
                </StackPanel>
            </StackPanel>
            
            <!--
                 Buttons for saving or cancelling. Cancel-button is hidden, if this dialog is shown as
                 a part of an extraction process.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        IsEnabled="{Binding ElementName=TitleTextBox, Path=(Validation.HasError),
                        Converter={StaticResource InvertBooleanConverter}}"/>
                <Button Style="{StaticResource DialogCancelButton}"
                        Visibility="{Binding IsAsking, Converter={StaticResource InverseBoolToVisConverter}}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         EXTRACTION BOOKMARK ORDER DIALOG
         Dialog for organizing bookmarks in sequence when extracting. NOTE! This dialog is not shown when extractable
         bookmarks are selected in the full graphical user interface (where they are selected and reordered in the same
         view).
    -->
    <DataTemplate DataType="{x:Type dialog:ExtractOrderDialog}">
        <StackPanel Margin="10">
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            <TextBlock HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       TextWrapping="Wrap"
                       TextAlignment="Center"
                       Width="440"
                       Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       FontStyle="Italic"
                       Text="{x:Static resDialog:ExtractionOrder.Instructions}"
                       Margin="10, 10, 10, 20"/>
            
            <!--
                 List for reordering the bookmarks by dragging and dropping or by selecting a bookmark
                 and pressing CTRL + arrow keys.
            -->
            <controls:OrderList/>
            
            <!--
                 Button for adding a placeholder for an external file (for numbering purposes).
            -->
            <Button Style="{StaticResource MaterialDesignOutlinedLightButton}"
                    Content="{x:Static resExtractButtons:Order.AddExternal}"
                    Command="{Binding AddExternal}"
                    Margin="10, 20, 10, 0"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10, 20, 10, 0"/>
            
            <!--
                 Switch for selecting whether the bookmarks should be organized according to the files they
                 have been extracted from (when extracting to a single file).
            -->
            <StackPanel Margin="0, 10, 10, 0"
                        Visibility="{Binding SingleFile, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                           VerticalAlignment="Center"
                           Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                           Text="{x:Static resDialog:ExtractionOrder.GroupByFiles}"
                           Margin="0, 0, 0, 10"/>
                <CheckBox Style="{DynamicResource OptionSwitch}"
                          IsChecked="{Binding GroupByFiles}"
                          x:Name="GroupByFilesCB"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Cursor="Hand"
                          ToolTip="{x:Static resToolTips:Extraction.BookmarkOrderDialogGroupByFiles}"/>
            </StackPanel>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        Content="{x:Static resButtons:General.Confirm}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         EXTRACTION ANNOTATIONS DIALOG
         A dialog prompting the user to select which annotations the user wishes to get removed
         from extracted files (when "Select" has been chosen as the annotation removal method).
    -->
    <DataTemplate DataType="{x:Type dialog:ExtractAnnotationsDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            <TextBlock HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       TextWrapping="Wrap"
                       TextAlignment="Center"
                       Width="370"
                       Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       FontStyle="Italic"
                       Text="{x:Static resDialog:ExtractionAnnotations.Instructions}"
                       Margin="10, 10, 10, 20"/>
            
            <!--
                 List all annotation creators from the pdfs to this ItemsControl. Creators are
                 searched directly from the pdfs. User can select any number of creators and
                 annotations by selected creators will be removed from products.
            -->
            <ItemsControl ItemsSource="{Binding Creators}"
                          Width="200">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <CheckBox Style="{DynamicResource MaterialDesignAccentCheckBox}"
                                      Grid.Column="0"
                                      IsChecked="{Binding IsChecked, Mode=TwoWay}"/>
                            
                            <!--
                                 For all other creators, show their name included in the pdf, but for
                                 the extractor himself, show "Own" (if the creator name matches Windows
                                 user name - as it does by default).
                            -->
                            <TextBlock Grid.Column="1"
                                       Margin="5, 0, 0, 0"
                                       VerticalAlignment="Center"
                                       Text="{Binding Name, 
                                       Converter={StaticResource UserNameReplacement}, ConverterParameter=Omat}"
                                       FontWeight="{Binding Name, 
                                       Converter={StaticResource UserNameToFontWeight}}"
                                       TextTrimming="CharacterEllipsis"/>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         WORKCOPY SETTINGS DIALOG
         A dialog for choosing work copy creation settings. 
    -->
    <DataTemplate DataType="{x:Type dialog:WorkCopySettingsDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Textbox for entering file name template. Most of the same placeholders may be used as in
                 extraction (with some exceptions, i.e., bookmark name). Cannot be empty and is validated.
            -->
            <TextBox Style="{DynamicResource HintedValidationTextBox}"
                     Text="{Binding TitleTemplate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                     ValidatesOnDataErrors=True}"
                     Width="250"
                     Name="TemplateText"
                     md:HintAssist.Hint="{x:Static resLabels:General.NameTemplate}"
                     md:HintAssist.HelperText="{x:Static resDialog:WorkCopyOptions.NameHelper}"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10, 20, 10, 20"/>
            
            <!--
                 Switch for choosing whether parts marked for redaction should be flattened (i.e.,
                 converted to red boxes) in the work copies.
            -->
            <StackPanel Margin="0, 0, 0, 0">
                <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                           VerticalAlignment="Center"
                           Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                           Text="{x:Static resDialog:WorkCopyOptions.FlattenRedactions}"
                           Margin="0, 0, 0, 10"/>
                <CheckBox Style="{DynamicResource OptionSwitch}"
                          IsChecked="{Binding FlattenRedactions, Mode=TwoWay}"
                          x:Name="FlattenRedactionsCB"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Cursor="Hand"
                          ToolTip="{x:Static resToolTips:WorkCopy.SettingsRedaction}"/>
            </StackPanel>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        IsEnabled="{Binding ElementName=TemplateText, Path=(Validation.HasError), 
                        Converter={StaticResource InvertBooleanConverter}}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         MERGE SETTINGS DIALOG
         A dialog for choosing settings for merging files.
    -->
    <DataTemplate DataType="{x:Type dialog:MergeSettingsDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Switch for choosing whether to number the pages in the resulting document.
            -->
            <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                       VerticalAlignment="Center"
                       Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       Text="{x:Static resDialog:MergeOptions.PageNumbersTitle}"
                       Margin="0, 0, 0, 10"/>
            <CheckBox Style="{DynamicResource OptionSwitch}"
                      IsChecked="{Binding AddPageNumbers}"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Cursor="Hand"/>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         COMPOSITION SETTINGS DIALOG
         A dialog for choosing composition settings.
    -->
    <DataTemplate DataType="{x:Type dialog:CompositionSettingsDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Switch for choosing whether to also scan in subfolders or not.
            -->
            <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                       VerticalAlignment="Center"
                       Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       Text="{x:Static resDialog:CompositionOptions.SubDirectories}"
                       Margin="0, 15, 0, 10"/>
            <CheckBox Style="{DynamicResource OptionSwitch}"
                      IsChecked="{Binding SearchSubDirectories, Mode=TwoWay}"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Cursor="Hand"
                      ToolTip="{x:Static resCompositionToolTips:Settings.Subdirectories}"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="15"/>
            
            <!--
                 Switch for choosing whether to delete any converted files created during the process.
                 For example, Word documents are converted to pdf before they are merged into the resulting
                 document. These pdf-files will be preserved unless this option is set to true.
            -->
            <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                       VerticalAlignment="Center"
                       Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       Text="{x:Static resDialog:CompositionOptions.DeleteConverted}"
                       Margin="0, 0, 0, 10"/>
            <CheckBox Style="{DynamicResource OptionSwitch}"
                      IsChecked="{Binding DeleteConverted, Mode=TwoWay}"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Cursor="Hand"
                      ToolTip="{x:Static resCompositionToolTips:Settings.DeleteConverted}"/>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         COMPOSITION PROFILE DIALOG
         A dialog for creating or modifying a composition profile.
    -->
    <DataTemplate DataType="{x:Type dialog:CompositionProfileDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Textbox for entering profile name. Cannot be empty and cannot be same as another
                 existing profile. Is validated.
            -->
            <TextBox Style="{DynamicResource HintedValidationTextBox}"
                     md:HintAssist.Hint="{x:Static resLabels:General.Name}"
                     Text="{Binding ProfileName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                     ValidatesOnDataErrors=True}"
                     Name="TitleText"
                     md:ValidationAssist.Suppress="{Binding SuppressError}"
                     Width="200"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10"/>
            
            <!--
                 Switch for choosing whether to add page numbers to the resulting document.
            -->
            <TextBlock HorizontalAlignment="Center" FontWeight="Bold"
                       VerticalAlignment="Center"
                       Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       Text="{x:Static resLabels:General.AddPageNumbers}"
                       Margin="0, 0, 0, 10"/>
            <CheckBox Style="{DynamicResource OptionSwitch}"
                      IsChecked="{Binding AddPageNumbers, Mode=TwoWay}"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Cursor="Hand"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10"/>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        IsEnabled="{Binding ElementName=TitleText, Path=(Validation.HasError), 
                        Converter={StaticResource InvertBooleanConverter}}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>
    
    <!--
         COMPOSITION FILESEGMENT DIALOG
         A dialog for creating or modifying a profile file segment. File segments are rules that
         are used to scan for files and rename them in the product.
    -->
    <DataTemplate DataType="{x:Type dialog:CompositionFileSegmentDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Name of the file segment. Cannot be empty and is validated.
            -->
            <TextBox Style="{DynamicResource HintedValidationTextBox}"
                     md:HintAssist.Hint="{x:Static resLabels:General.Name}"
                     Text="{Binding SegmentName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                     ValidatesOnDataErrors=True}"
                     Name="CompositionFileTitleText"
                     Width="200"/>
            
            <!--
                 Switch for choosing whether the final name in the product document should be obtained
                 from the file itself (rather than from a manually entered template).
            -->
            <CheckBox Style="{DynamicResource MaterialDesignAccentCheckBox}"
                      Content="{x:Static resDialog:CompositionFileSegment.NameFromFileDescription}" 
                      FontSize="14"
                      IsChecked="{Binding NameFromFile}"
                      HorizontalAlignment="Center"
                      Margin="20, 0, 20, 10"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10"/>
            
            <StackPanel Orientation="Horizontal">
                
                <!--
                     Textboxes for entering the search (and ignore) criteria of filenames. Must be entered in a valid
                     Regex form. They are validated.
                -->
                <StackPanel>
                    <TextBox Style="{DynamicResource HintedTextBox}"
                             md:HintAssist.Hint="{x:Static resLabels:General.SearchExpression}"
                             Text="{Binding SearchTerm, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                             ValidatesOnDataErrors=True}"
                             Name="CompositionFileSearchExpressionText"
                             Width="200"/>
                    <TextBox Style="{DynamicResource HintedTextBox}"
                             md:HintAssist.Hint="{x:Static resLabels:General.IgnoreExpression}"
                             Text="{Binding ToRemove, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                             ValidatesOnDataErrors=True}"
                             Name="CompositionFileIgnoreExpressionText"
                             Width="200"/>
                </StackPanel>
                
                <Rectangle Width="2" Fill="LightGray" Opacity="0.5" Margin="5" RadiusX="2" RadiusY="2"/>
                
                <!--
                     Textboxes for entering the minimun and maximun amount of accepted files of the
                     same file segment type. Zero means unlimited.
                -->
                <StackPanel>
                    <TextBox Style="{DynamicResource NumberTextBox}"
                             Text="{Binding MinCount, UpdateSourceTrigger=PropertyChanged, 
                             ValidatesOnDataErrors=True}"
                             Width="70"
                             Name="CompositionFileMinCountText"
                             md:HintAssist.Hint="{x:Static resLabels:General.Minimum}"/>
                    <TextBox Style="{DynamicResource NumberTextBox}"
                             Text="{Binding MaxCount, UpdateSourceTrigger=PropertyChanged, 
                             ValidatesOnDataErrors=True}"
                             Width="70"
                             Name="CompositionFileMaxCountText"
                             md:HintAssist.Hint="{x:Static resLabels:General.Maximum}"/>
                </StackPanel>
            </StackPanel>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10, 10, 10, 0"/>
            
            <!--
                 Textbox for entering a sample name (e.g. "Account receipt 1"). This will be displayed
                 to the user when hovering over a file segment element. This example is not mandatory.
            -->
            <TextBox Style="{DynamicResource HintedValidationTextBox}"
                     md:HintAssist.Hint="{x:Static resLabels:General.Example}"
                     Text="{Binding Example, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Width="200"/>
            
            <Separator Style="{DynamicResource MaterialDesignSeparator}"
                       Margin="10"/>
            
            <!--
                 Buttons for saving and cancelling. Save is only possible if all validations have been approved.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}">
                    <Button.IsEnabled>
                        <MultiBinding Converter="{StaticResource BooleanAllNegative}">
                            <Binding ElementName="CompositionFileTitleText" Path="(Validation.HasError)"/>
                            <Binding ElementName="CompositionFileSearchExpressionText" Path="(Validation.HasError)"/>
                            <Binding ElementName="CompositionFileIgnoreExpressionText" Path="(Validation.HasError)"/>
                            <Binding ElementName="CompositionFileMinCountText" Path="(Validation.HasError)"/>
                            <Binding ElementName="CompositionFileMaxCountText" Path="(Validation.HasError)"/>
                        </MultiBinding>
                    </Button.IsEnabled>
                </Button>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         COMPOSITION TITLESEGMENT DIALOG
         A dialog for creating and editing a title segment. Title segments are simply bookmarks that
         will be inserted in the relevant position in the final product. There is no file that would
         associate with a title.
    -->
    <DataTemplate DataType="{x:Type dialog:CompositionTitleSegmentDialog}">
        <StackPanel>
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Name of the title segment. Cannot be empty and is validated.
            -->
            <TextBox Style="{DynamicResource HintedValidationTextBox}"
                     md:HintAssist.Hint="{x:Static resLabels:General.Name}"
                     Text="{Binding SegmentName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                     ValidatesOnDataErrors=True}"
                     Name="CompositionTitleNameText"
                     Width="200"/>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        IsEnabled="{Binding ElementName=CompositionTitleNameText, Path=(Validation.HasError),
                        Converter={StaticResource InvertBooleanConverter}}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>
    
    <!--
         COMPOSITION PROFILE SELECTION DIALOG
         A dialog for selecting a composition profile. 
    -->
    <DataTemplate DataType="{x:Type dialog:CompositionProfileSelectionDialog}">
        <StackPanel Margin="10">
            
            <!--
                 Organize profiles according to their editability and name.
            -->
            <StackPanel.Resources>
                <CollectionViewSource x:Key="ProfileSource"
                                      Source="{Binding Profiles}">
                    <CollectionViewSource.SortDescriptions>
                        <scm:SortDescription PropertyName="IsEditable"/>
                        <scm:SortDescription PropertyName="ProfileName" Direction="Ascending"/>
                    </CollectionViewSource.SortDescriptions>
                </CollectionViewSource>
            </StackPanel.Resources>
            
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding DialogTitle}"/>
            
            <!--
                 Combobox for choosing the correct profile.
            -->
            <ComboBox Style="{DynamicResource MaterialDesignFloatingHintComboBox}"
                      Grid.Column="2"
                      md:HintAssist.Hint="{x:Static resLabels:General.Profile}"
                      md:HintAssist.FloatingOffset="0, -22"
                      md:HintAssist.FloatingScale="0.9"
                      md:HintAssist.Foreground="{DynamicResource SecondaryHueMidBrush}"
                      Width="200"
                      FontSize="16"
                      Margin="0, 30, 0, 0"
                      md:ComboBoxAssist.ShowSelectedItem="True"
                      SelectedItem="{Binding SelectedProfile, Mode=TwoWay}"
                      ItemsSource="{Binding Source={StaticResource ProfileSource}}"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      VerticalContentAlignment="Bottom"
                      HorizontalContentAlignment="Left">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock TextTrimming="CharacterEllipsis"
                                   Text="{Binding ProfileName}"
                                   FontWeight="{Binding IsEditable, Converter={StaticResource NegativeToBold}}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            
            <!--
                 Buttons for saving and cancelling.
            -->
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"
                        Content="{x:Static resButtons:General.Confirm}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         COMPOSITION FILE COUNT DIALOG
         A dialog prompting user to choose the correct files when there are extra files with
         the selection rule in question or no file with matching (required) criteria is found.
    -->
    <DataTemplate DataType="{x:Type dialog:CompositionFileCountDialog}">
        <StackPanel Margin="10">
            <TextBlock Style="{DynamicResource DialogTitleTextBlock}"
                       Text="{Binding Segment.SegmentName}"/>
            <TextBlock Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       FontSize="14" Width="300"
                       TextAlignment="Justify"
                       TextWrapping="Wrap"
                       Text="{Binding DialogTextContent}"
                       Margin="15, 15, 15, 0"/>
            
            <!--
                 No file matching the criteria was found.
                 One file is missing.
            -->
            <StackPanel Orientation="Horizontal"
                        Margin="15"
                        HorizontalAlignment="Center"
                        Visibility="{Binding SingleSelection, Converter={StaticResource BooleanToVisibilityConverter}}">
                <!--
                     Button for previewing a file. Shows the path and name of the selected file.
                -->
                <Button Style="{DynamicResource MaterialDesignPaperSecondaryButton}"
                        Margin="0, 0, 15, 0"
                        Width="230"
                        VerticalContentAlignment="Center"
                        VerticalAlignment="Center"
                        HorizontalContentAlignment="Center"
                        ToolTip="{Binding Files[0].FilePath}"
                        Command="{Binding Files[0].OpenFile}">
                    <TextBlock FontSize="14"
                               Text="{Binding Files[0].FileName}"
                               TextTrimming="CharacterEllipsis"/>
                </Button>
                
                <!--
                     Button for browsing for the correct file.
                -->
                <Button Style="{DynamicResource MaterialDesignIconButton}"
                        Command="{Binding AddFile}">
                    <md:PackIcon Kind="Folder" Foreground="{DynamicResource SecondaryHueMidBrush}"/>
                </Button>
            </StackPanel>
            
            <!--
                 Multiple files were not found or more than the allowed number of files were found.
            -->
            <Grid Margin="15, 15, 15, 0"
                  Visibility="{Binding SingleSelection, Converter={StaticResource BooleanToOppositeVisibility}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                
                <!--
                     Show info on the amount of found files (how many were found,
                     what are the max and min values, etc.).
                -->
                <StackPanel Grid.Column="0"
                            Grid.Row="0"
                            Grid.ColumnSpan="2"
                            HorizontalAlignment="Center">
                    <TextBlock Style="{StaticResource SegmentHeaderText}"
                               Foreground="{DynamicResource SecondaryHueMidBrush}"
                               Text="{x:Static resDialog:CompositionFileCount.FilesFound}"
                               HorizontalAlignment="Center"
                               Margin="10, 0, 10, 10"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <TextBlock Margin="10, 0, 10, 0">
                            <Run Text="{x:Static resDialog:CompositionFileCount.MinimumFiles}"/>
                            <Run Text="{Binding Segment.MinCount}" FontWeight="ExtraBold"/>
                        </TextBlock>
                        <TextBlock Margin="10, 0, 10, 0">
                            <Run Text="{x:Static resDialog:CompositionFileCount.MaximumFiles}"/>
                            <Run Text="{Binding Segment.MaxCount, StringFormat={}{0:#;;&#x221E;}}" FontWeight="ExtraBold"/>
                        </TextBlock>
                    </StackPanel>
                </StackPanel>
                
                <Separator Margin="15" Grid.Row="1" Grid.Column="0"
                           Grid.ColumnSpan="2" Style="{DynamicResource MaterialDesignSeparator}"/>
                
                <!--
                     A listview showing the files that were found. Allows selecting files.
                -->
                <ListView ItemsSource="{Binding Files}"
                          Grid.Column="0"
                          Grid.Row="2"
                          Height="120"
                          Width="300"
                          SelectedItem="{Binding SelectedFile}"
                          Style="{DynamicResource SelectionList}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ContentControl Grid.Column="0">
                                    <TextBlock Text="{Binding FileName}"
                                               TextTrimming="CharacterEllipsis"/>
                                    <behaviors:Interaction.Triggers>
                                        <behaviors:EventTrigger EventName="MouseDoubleClick">
                                            <behaviors:InvokeCommandAction Command="{Binding OpenFile}"/>
                                        </behaviors:EventTrigger>
                                    </behaviors:Interaction.Triggers>
                                </ContentControl>
                                <md:PackIcon Grid.Column="1"
                                             Margin="10, 0, 10, 0"
                                             Kind="FolderInformation"
                                             VerticalAlignment="Center"
                                             Foreground="{DynamicResource SecondaryHueMidBrush}"
                                             ToolTip="{Binding FilePath}"
                                             ToolTipService.InitialShowDelay="0"
                                             ToolTipService.ShowDuration="30000"/>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                
                <!--
                     Button for adding files to the list and removing them from the list.
                -->
                <StackPanel VerticalAlignment="Center"
                            Grid.Column="1"
                            Grid.Row="2">
                    <Button Style="{DynamicResource MaterialDesignIconButton}"
                            Foreground="{DynamicResource SecondaryHueMidBrush}"
                            Command="{Binding AddFiles}">
                        <md:PackIcon Kind="PlusThick"/>
                    </Button>
                    <Button Style="{DynamicResource MaterialDesignIconButton}"
                            Foreground="{DynamicResource SecondaryHueMidBrush}"
                            Command="{Binding RemoveFiles}">
                        <md:PackIcon Kind="MinusThick"/>
                    </Button>
                </StackPanel>
                
                <Separator Margin="15" Grid.Row="3" Grid.Column="0"
                           Grid.ColumnSpan="2" Style="{DynamicResource MaterialDesignSeparator}"/>
                
                <!--
                     Buttons for saving and cancelling.
                -->
            </Grid>
            <StackPanel Style="{StaticResource DialogButtonStackPanel}">
                <Button Style="{StaticResource DialogSaveButton}"/>
                <Button Style="{StaticResource DialogCancelButton}"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--
         PROGRESS DIALOG
         Dialog for showing the user how the task is progressing. 
    -->
    <DataTemplate DataType="{x:Type dialog:ProgressDialog}">
        <StackPanel> 
            
            <!--
                 Show an empty ellipse and a progress bar inside of it. Show percentage
                 text only if progress is not 0 (indeterminate).
            -->
            <Grid Width="60" Height="60"
                  Margin="32, 32, 32, 10">
                <Ellipse Width="60"
                         Height="60"
                         Fill="Transparent"
                         Stroke="{DynamicResource MaterialDesignDarkBackground}"
                         Opacity="0.3"
                         StrokeThickness="2"/>
                <ProgressBar Style="{DynamicResource MaterialDesignCircularProgressBar}"
                             Width="60" Height="60"
                             Value="{Binding TotalPercent}"
                             IsIndeterminate="True"
                             Foreground="{DynamicResource PrimaryHueLightBrush}"
                             VerticalAlignment="Center" HorizontalAlignment="Center"
                             x:Name="MainProgress">
                </ProgressBar>
                <TextBlock HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           Text="{Binding TotalPercent, StringFormat={}{0}%}"
                           Visibility="{Binding TotalPercent, 
                           Converter={StaticResource NotZeroToVisibilityConverter}}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock"
                               BasedOn="{StaticResource MaterialDesignSubtitle2TextBlock}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=MainProgress, Path=Value}"
                                             Value="100">
                                    <Setter Property="Opacity" Value="0"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                
                <!--
                     Show vector logo inside the progress ellipse if progress is 100 percent.
                -->
                <ContentControl Content="{StaticResource LogoIconVector}" HorizontalAlignment="Center"
                                Name="Logo">
                    <ContentControl.Style>
                        <Style TargetType="ContentControl">
                            <Setter Property="Opacity" Value="0"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=MainProgress, Path=Value}"
                                             Value="100">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                    Storyboard.TargetProperty="Opacity"
                                                    To="1" Duration="0:0:1"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                    <DataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                    Storyboard.TargetProperty="Opacity"
                                                    To="0" Duration="0:0:0"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.ExitActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContentControl.Style>
                    <ContentControl.Triggers>
                        <EventTrigger RoutedEvent="ContentControl.Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation
                                        Storyboard.TargetName="Logo"
                                        Storyboard.TargetProperty="Height"
                                        From="50" To="45" Duration="0:0:1.5"
                                        AutoReverse="True" RepeatBehavior="Forever"/>
                                    <DoubleAnimation
                                        Storyboard.TargetName="Logo"
                                        Storyboard.TargetProperty="Width"
                                        From="50" To="45" Duration="0:0:1.5"
                                        AutoReverse="True" RepeatBehavior="Forever"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ContentControl.Triggers>
                </ContentControl>
            </Grid>
            
            <!--
                 Show the phase of task progression (e.g. "Loading files", "Copying...", etc.).
            -->
            <Grid Height="50">
                <TextBlock Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           Width="180"
                           Margin="32, 0, 32, 5"
                           TextAlignment="Center"
                           TextWrapping="Wrap"
                           FontSize="16"
                           Text="{Binding Phase}"/>
            </Grid>
            
            <!--
                 Show progress of current subphase, if applicable.
            -->
            <ProgressBar Style="{DynamicResource MaterialDesignLinearProgressBar}"
                         Foreground="{DynamicResource SecondaryHueMidBrush}"
                         Background="{DynamicResource MaterialDesignShadowBrush}"
                         BorderBrush="{DynamicResource MaterialDesignShadowBrush}"
                         Width="120"
                         Height="10"
                         Value="{Binding PartPercent}"
                         IsIndeterminate="{Binding PartPercent, Converter={StaticResource ZeroToTrue}}"
                         VerticalAlignment="Center"
                         HorizontalAlignment="Center"
                         Visibility="{Binding Part, Converter={StaticResource NullableToVisibilityConverter}}"
                         Margin="32, 0, 32, 0"/>
            
            <!--
                 Show name of the current subphase, if applicable.
            -->
            <TextBlock Style="{DynamicResource MaterialDesignCaptionTextBlock}"
                       HorizontalAlignment="Center"
                       Width="180"
                       Margin="32, 0, 32, 0"
                       TextAlignment="Center"
                       FontSize="10"
                       Text="{Binding Part}"
                       Visibility="{Binding Part, Converter={StaticResource NullableToVisibilityConverter}}"/>
            
            <!--
                 Cancel / close button, depending on the phase of the progress.
            -->
            <Button Command="{Binding Close}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DialogButton}">
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="16, 5, 16, 26"/>
                        <Setter Property="Content" Value="{x:Static resButtons:General.Cancel}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=MainProgress, Path=Value}" Value="100">
                                <Setter Property="Content" Value="{x:Static resButtons:General.Close}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
    </DataTemplate>
</ResourceDictionary>